`Smoking Status` = case_when(
SmokingStatusCode == "No" ~ 1,
SmokingStatusCode == "Yes" ~ 2,
.default = NA),
`Smoking Status` = as.factor(`Smoking Status`)
)
# Recode Alcohol Use
data <- data %>%
mutate(
`Alcohol Use` = case_when(
AlcoholUseCode == "No" ~ 1,
AlcoholUseCode == "Yes" ~ 2,
.default = NA),
`Alcohol Use` = as.factor(`Alcohol Use`)
)
# Recode Diabetes Status
data <- data %>%
mutate(
Diabetes = case_when(
DiabetesStatusCode == "Yes" ~ 1,
DiabetesStatusCode == "Borderline" ~ 2,
DiabetesStatusCode == "No" ~ 3,
.default = NA),
Diabetes = as.factor(Diabetes)
)
# Recode Oral Health Status
data <- data %>%
mutate(
`Oral Health Issues` = case_when(
OralHealthIssueCode == "Continue your regular routine care" ~ 1,
OralHealthIssueCode == "See a dentist within the next 2 weeks" ~ 2,
OralHealthIssueCode == "See a dentist at your earliest convenience" ~ 3,
OralHealthIssueCode == "See a dentist immediately" ~ 4,
.default = NA),
`Oral Health Issues` = as.factor(`Oral Health Issues`)
)
# Recode Benefit of Quitting Smoking
data <- data %>%
mutate(
`Told the benefit of quitting smoking?` = case_when(
BenefitQuitSmokingCode == "Yes" ~ 1,
BenefitQuitSmokingCode == "No" ~ 2,
.default = NA),
`Told the benefit of quitting smoking?` = as.factor(`Told the benefit of quitting smoking?`)
)
# SELECT
#   SUM(CASE WHEN DIQ010 IS NULL THEN 1 ELSE 0 END) AS missing_diabetes,
#   COUNT(*) AS total_records
# FROM DIQ_I;
# SELECT
#   SUM(CASE WHEN ALQ101 IS NULL THEN 1 ELSE 0 END) AS missing_alcohol,
#   COUNT(*) AS total_records
# FROM ALQ_I;
# Counts of missing values for diabetes status using SQL
missing_diabetes <- dbGetQuery(con, "
SELECT
SUM(CASE WHEN DIQ010 IS NULL THEN 1 ELSE 0 END) AS Missing,
COUNT(*) AS 'Total Records'
FROM DIQ_I;
")
# Counts of missing values for alcohol use using SQL
missing_alcohol <- dbGetQuery(con, "
SELECT
SUM(CASE WHEN ALQ101 IS NULL THEN 1 ELSE 0 END) AS Missing,
COUNT(*) AS 'Total Records'
FROM ALQ_I;
")
df = bind_rows(missing_diabetes, missing_alcohol)
rownames(df) = c("Diabetes", "Alcohol Use")
colnames(df) = c("Missing Recods", "Total Records")
# kable(df, caption = "Missing Data Counts for Diabetes Status and Alcohol Use")
# Missing data
library(DataExplorer)
missing = plot_missing(select(data,  c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes", "Oral Health Issues")))
model_data = data %>% filter(Age >= 21)
missing_o21 = plot_missing(select(model_data, c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes", "Oral Health Issues")))
#| label: fig-missing1
#| layout-ncol: 1
#| echo: false
missing
#| label: fig-missing2
#| layout-ncol: 1
#| echo: false
missing_o21
# Variables for Table 1
data_raw = data_raw %>% mutate(Gender = GenderCode, Education = EducationCode,
`Smoking Status` = SmokingStatusCode,
`Alcohol Use` = AlcoholUseCode,
Diabetes = DiabetesStatusCode,
`Oral Health Issues` = OralHealthIssueCode) %>% filter(Age >= 18)
vars <- c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes", "Oral Health Issues")
labels = c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes Status", "Oral Health Issue")
# Create Table 1
table1 <- CreateTableOne(vars = vars, data = data_raw, factorVars = vars[-1], includeNA = TRUE)
#| tbl-cap: "Summary of Characteristics"
kableone(table1)
#| label: tbl-contingency
#| layout-ncol: 1
#| echo: false
#| tbl-cap: "Contingency Table for Smoking Status v.s. If the Participant was Told the Benefit of Quitting Smoking"
# Create contingency table
smoking_benefit_table <- table(data$SmokingStatusCode, data$BenefitQuitSmokingCode, useNA = "ifany")
kable(smoking_benefit_table)
# Perform Chi-squared test
chi_test <- chisq.test(smoking_benefit_table, simulate.p.value = TRUE)
chi_test
# Prepare data for modeling
model_data = data %>% filter(Age >= 18) %>%
mutate(`Oral Health Issues (Binary)` = case_when(`Oral Health Issues` == 1 ~ 0,
`Oral Health Issues` != 1 ~ 1,
.default = NA))
# Fit logistic regression model
model <- glm(`Oral Health Issues (Binary)` ~ `Smoking Status` + `Alcohol Use` +
Age + Gender + Diabetes + Education,
data = model_data, family = "binomial")
# Model summary
summary(model)
# Extract tidy model summary with confidence intervals
library(broom)
model_coef <- tidy(model, conf.int = TRUE)
# Remove the intercept term
model_coef <- model_coef %>%
filter(term != "(Intercept)")
# Adjust term names for readability (optional)
model_coef <- model_coef %>%
mutate(term = recode(term,
# Adjust according to your variable names
"`Smoking Status`2" = "Smoking Status: Yes",
"`Alcohol Use`2" = "Alcohol Use: Yes",
"Gender2" = "Gender:Male",
"Diabetes2" = "Diabetes: Borderline",
"Diabetes3" = "Diabetes: No",
"Education2" = "9-11th Grade (Includes 12th Grade With No Diploma)",
"Education3" = "High School Grad/GED or Equivalent",
"Education4" = "Some College or AA Degree",
"Education5" = "College Graduate or Above"))
model_coef = model_coef[-3,]
model_coef$order = 1:9
# Reorder terms for plotting
model_coef <- model_coef %>%
mutate(term = fct_reorder(term, desc(order)))
odds_ratio = ggplot(model_coef, aes(x = exp(estimate), y = term)) +
geom_point() +
geom_errorbarh(aes(xmin = exp(conf.low), xmax = exp(conf.high)), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted", color = "red") +
labs(title = "Effect of Predictors on Oral Health Issues",
x = "Odds Ratio Estimate", y = ""
#,y = "Predictor Variables"
) +
theme_minimal()
#| label: fig-or
#| layout-ncol: 1
#| echo: false
odds_ratio
# Obtain probabilities by using "predict" for glm
model_age = glm(`Oral Health Issues (Binary)` ~ Age,
data = model_data, family = binomial(link = "logit"))
model_data$predict_prob <- predict(model, model_data, se.fit = TRUE, type = "response")$fit
d = model_data %>%
group_by(Age, `Oral Health Issues (Binary)`) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>% filter(`Oral Health Issues (Binary)` == 1)
model_data = inner_join(model_data, select(d, "Age", "perc"), by = "Age")
# Plot
oral_v_age = ggplot(model_data, aes(x = Age, y = `Oral Health Issues (Binary)`)) +
geom_point(alpha = 0.1, position=position_jitter(width=0.1, height=0.1)) +
geom_smooth(method="glm",
method.args=list(family="binomial")) +
geom_bar(aes(x = Age, y = perc), stat = "summary", fill = "steelblue") +
labs(
title = "Proportion of People with Oral Health Issues by Age",
x = "Age Group",
y = "Oral Health Issues"
) +
theme_classic()
#| label: fig-age
#| layout-ncol: 1
#| echo: false
oral_v_age
# Prepare data for modeling
model_data = data %>% filter(Age >= 21) %>%
mutate(`Oral Health Issues (Binary)` = case_when(`Oral Health Issues` == 1 ~ 0,
`Oral Health Issues` != 1 ~ 1,
.default = NA))
# Fit logistic regression model
model <- glm(`Oral Health Issues (Binary)` ~ `Smoking Status` + `Alcohol Use` +
Age + Gender + Diabetes + Education,
data = model_data, family = "binomial")
# Model summary
summary(model)
# Extract tidy model summary with confidence intervals
library(broom)
model_coef <- tidy(model, conf.int = TRUE)
# Remove the intercept term
model_coef <- model_coef %>%
filter(term != "(Intercept)")
# Adjust term names for readability (optional)
model_coef <- model_coef %>%
mutate(term = recode(term,
# Adjust according to your variable names
"`Smoking Status`2" = "Smoking Status: Yes",
"`Alcohol Use`2" = "Alcohol Use: Yes",
"Gender2" = "Gender:Male",
"Diabetes2" = "Diabetes: Borderline",
"Diabetes3" = "Diabetes: No",
"Education2" = "9-11th Grade (Includes 12th Grade With No Diploma)",
"Education3" = "High School Grad/GED or Equivalent",
"Education4" = "Some College or AA Degree",
"Education5" = "College Graduate or Above"))
model_coef = model_coef[-3,]
model_coef$order = 1:9
# Reorder terms for plotting
model_coef <- model_coef %>%
mutate(term = fct_reorder(term, desc(order)))
odds_ratio = ggplot(model_coef, aes(x = exp(estimate), y = term)) +
geom_point() +
geom_errorbarh(aes(xmin = exp(conf.low), xmax = exp(conf.high)), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted", color = "red") +
labs(title = "Effect of Predictors on Oral Health Issues",
x = "Odds Ratio Estimate", y = ""
#,y = "Predictor Variables"
) +
theme_minimal()
# Obtain probabilities by using "predict" for glm
model_age = glm(`Oral Health Issues (Binary)` ~ Age,
data = model_data, family = binomial(link = "logit"))
model_data$predict_prob <- predict(model, model_data, se.fit = TRUE, type = "response")$fit
d = model_data %>%
group_by(Age, `Oral Health Issues (Binary)`) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>% filter(`Oral Health Issues (Binary)` == 1)
model_data = inner_join(model_data, select(d, "Age", "perc"), by = "Age")
# Plot
oral_v_age = ggplot(model_data, aes(x = Age, y = `Oral Health Issues (Binary)`)) +
geom_point(alpha = 0.1, position=position_jitter(width=0.1, height=0.1)) +
geom_smooth(method="glm",
method.args=list(family="binomial")) +
geom_bar(aes(x = Age, y = perc), stat = "summary", fill = "steelblue") +
labs(
title = "Proportion of People with Oral Health Issues by Age",
x = "Age Group",
y = "Oral Health Issues"
) +
theme_classic()
d = model_data %>%
group_by(Age, `Oral Health Issues (Binary)`) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>% filter(`Oral Health Issues (Binary)` == 1)
model_data = inner_join(model_data, select(d, "Age", "perc"), by = "Age")
# Plot
oral_v_age = ggplot(model_data, aes(x = Age, y = `Oral Health Issues (Binary)`)) +
geom_point(alpha = 0.1, position=position_jitter(width=0.1, height=0.1)) +
geom_smooth(method="glm",
method.args=list(family="binomial")) +
geom_bar(aes(x = Age, y = perc), stat = "summary", fill = "steelblue") +
labs(
title = "Proportion of People with Oral Health Issues by Age",
x = "Age Group",
y = "Oral Health Issues"
) +
theme_classic()
#| label: fig-age
#| layout-ncol: 1
#| echo: false
oral_v_age
#| label: fig-age
#| layout-ncol: 1
#| echo: false
oral_v_age
# Load necessary libraries
library(here)
library(DBI)
library(dplyr)
library(dbplyr)
library(RSQLite)
library(ggplot2)
library(knitr)
library(tidyr)
library(forcats)
library(tableone)
# Define the path to the SQLite database
db_path <- here("data", "nhanes_wave_i.sqlite")
# Connect to the SQLite database
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = db_path)
# List tables in the database
tables <- dbListTables(con)
# Create tbl objects for the relevant tables
demographics <- tbl(con, "DEMO_I")
smoking <- tbl(con, "SMQ_I")
alcohol <- tbl(con, "ALQ_I")
diabetes <- tbl(con, "DIQ_I")
oral_health <- tbl(con, "OHXREF_I")
benefit_quit <- tbl(con, "OHQ_I")
# Join the tables on SEQN and select relevant variables
data_raw <- demographics %>%
select(SEQN, Age = RIDAGEYR, GenderCode = RIAGENDR, EducationCode = DMDEDUC2) %>%
left_join(smoking %>% select(SEQN, SmokingStatusCode = SMQ020), by = "SEQN") %>%
left_join(alcohol %>% select(SEQN, AlcoholUseCode = ALQ101), by = "SEQN") %>%
left_join(diabetes %>% select(SEQN, DiabetesStatusCode = DIQ010), by = "SEQN") %>%
left_join(oral_health %>% select(SEQN, OralHealthIssueCode = OHAREC), by = "SEQN") %>%
left_join(benefit_quit %>% select(SEQN, BenefitQuitSmokingCode = OHQ610), by = "SEQN")  %>%
collect()
data = data_raw
# Recode Variables:
# Recode Gender
data <- data %>%
mutate(
Gender = case_when(GenderCode == "Female" ~ 1,
GenderCode == "Male" ~ 2,
.default = NA),
Gender = as.factor(Gender)
)
# Recode Education Level
data <- data %>%
mutate(
Education = case_when(
EducationCode == "Less than 9th grade" ~ 1,
EducationCode == "9-11th grade (Includes 12th grade with no diploma)" ~ 2,
EducationCode == "High school graduate/GED or equivalent" ~ 3,
EducationCode == "Some college or AA degree" ~ 4,
EducationCode == "College graduate or above" ~ 5,
.default = NA),
Education = as.factor(Education)
)
# Recode Smoking Status
data <- data %>%
mutate(
`Smoking Status` = case_when(
SmokingStatusCode == "No" ~ 1,
SmokingStatusCode == "Yes" ~ 2,
.default = NA),
`Smoking Status` = as.factor(`Smoking Status`)
)
# Recode Alcohol Use
data <- data %>%
mutate(
`Alcohol Use` = case_when(
AlcoholUseCode == "No" ~ 1,
AlcoholUseCode == "Yes" ~ 2,
.default = NA),
`Alcohol Use` = as.factor(`Alcohol Use`)
)
# Recode Diabetes Status
data <- data %>%
mutate(
Diabetes = case_when(
DiabetesStatusCode == "Yes" ~ 1,
DiabetesStatusCode == "Borderline" ~ 2,
DiabetesStatusCode == "No" ~ 3,
.default = NA),
Diabetes = as.factor(Diabetes)
)
# Recode Oral Health Status
data <- data %>%
mutate(
`Oral Health Issues` = case_when(
OralHealthIssueCode == "Continue your regular routine care" ~ 1,
OralHealthIssueCode == "See a dentist within the next 2 weeks" ~ 2,
OralHealthIssueCode == "See a dentist at your earliest convenience" ~ 3,
OralHealthIssueCode == "See a dentist immediately" ~ 4,
.default = NA),
`Oral Health Issues` = as.factor(`Oral Health Issues`)
)
# Recode Benefit of Quitting Smoking
data <- data %>%
mutate(
`Told the benefit of quitting smoking?` = case_when(
BenefitQuitSmokingCode == "Yes" ~ 1,
BenefitQuitSmokingCode == "No" ~ 2,
.default = NA),
`Told the benefit of quitting smoking?` = as.factor(`Told the benefit of quitting smoking?`)
)
# SELECT
#   SUM(CASE WHEN DIQ010 IS NULL THEN 1 ELSE 0 END) AS missing_diabetes,
#   COUNT(*) AS total_records
# FROM DIQ_I;
# SELECT
#   SUM(CASE WHEN ALQ101 IS NULL THEN 1 ELSE 0 END) AS missing_alcohol,
#   COUNT(*) AS total_records
# FROM ALQ_I;
# Counts of missing values for diabetes status using SQL
missing_diabetes <- dbGetQuery(con, "
SELECT
SUM(CASE WHEN DIQ010 IS NULL THEN 1 ELSE 0 END) AS Missing,
COUNT(*) AS 'Total Records'
FROM DIQ_I;
")
# Counts of missing values for alcohol use using SQL
missing_alcohol <- dbGetQuery(con, "
SELECT
SUM(CASE WHEN ALQ101 IS NULL THEN 1 ELSE 0 END) AS Missing,
COUNT(*) AS 'Total Records'
FROM ALQ_I;
")
df = bind_rows(missing_diabetes, missing_alcohol)
rownames(df) = c("Diabetes", "Alcohol Use")
colnames(df) = c("Missing Recods", "Total Records")
# kable(df, caption = "Missing Data Counts for Diabetes Status and Alcohol Use")
# Missing data
library(DataExplorer)
missing = plot_missing(select(data,  c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes", "Oral Health Issues")))
model_data = data %>% filter(Age >= 21)
missing_o21 = plot_missing(select(model_data, c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes", "Oral Health Issues")))
#| label: fig-missing1
#| layout-ncol: 1
#| echo: false
missing
#| label: fig-missing2
#| layout-ncol: 1
#| echo: false
missing_o21
# Variables for Table 1
data_raw = data_raw %>% mutate(Gender = GenderCode, Education = EducationCode,
`Smoking Status` = SmokingStatusCode,
`Alcohol Use` = AlcoholUseCode,
Diabetes = DiabetesStatusCode,
`Oral Health Issues` = OralHealthIssueCode) %>% filter(Age >= 18)
vars <- c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes", "Oral Health Issues")
labels = c("Age", "Gender", "Education", "Smoking Status", "Alcohol Use", "Diabetes Status", "Oral Health Issue")
# Create Table 1
table1 <- CreateTableOne(vars = vars, data = data_raw, factorVars = vars[-1], includeNA = TRUE)
#| tbl-cap: "Summary of Characteristics"
kableone(table1)
#| label: tbl-contingency
#| layout-ncol: 1
#| echo: false
#| tbl-cap: "Contingency Table for Smoking Status v.s. If the Participant was Told the Benefit of Quitting Smoking"
# Create contingency table
smoking_benefit_table <- table(data$SmokingStatusCode, data$BenefitQuitSmokingCode, useNA = "ifany")
kable(smoking_benefit_table)
# Perform Chi-squared test
chi_test <- chisq.test(smoking_benefit_table, simulate.p.value = TRUE)
chi_test
# Prepare data for modeling
model_data = data %>% filter(Age >= 21) %>%
mutate(`Oral Health Issues (Binary)` = case_when(`Oral Health Issues` == 1 ~ 0,
`Oral Health Issues` != 1 ~ 1,
.default = NA))
# Fit logistic regression model
model <- glm(`Oral Health Issues (Binary)` ~ `Smoking Status` + `Alcohol Use` +
Age + Gender + Diabetes + Education,
data = model_data, family = "binomial")
# Model summary
summary(model)
# Extract tidy model summary with confidence intervals
library(broom)
model_coef <- tidy(model, conf.int = TRUE)
# Remove the intercept term
model_coef <- model_coef %>%
filter(term != "(Intercept)")
# Adjust term names for readability (optional)
model_coef <- model_coef %>%
mutate(term = recode(term,
# Adjust according to your variable names
"`Smoking Status`2" = "Smoking Status: Yes",
"`Alcohol Use`2" = "Alcohol Use: Yes",
"Gender2" = "Gender:Male",
"Diabetes2" = "Diabetes: Borderline",
"Diabetes3" = "Diabetes: No",
"Education2" = "9-11th Grade (Includes 12th Grade With No Diploma)",
"Education3" = "High School Grad/GED or Equivalent",
"Education4" = "Some College or AA Degree",
"Education5" = "College Graduate or Above"))
model_coef = model_coef[-3,]
model_coef$order = 1:9
# Reorder terms for plotting
model_coef <- model_coef %>%
mutate(term = fct_reorder(term, desc(order)))
odds_ratio = ggplot(model_coef, aes(x = exp(estimate), y = term)) +
geom_point() +
geom_errorbarh(aes(xmin = exp(conf.low), xmax = exp(conf.high)), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted", color = "red") +
labs(title = "Effect of Predictors on Oral Health Issues",
x = "Odds Ratio Estimate", y = ""
#,y = "Predictor Variables"
) +
theme_minimal()
#| label: fig-or
#| layout-ncol: 1
#| echo: false
odds_ratio
d = model_data %>%
group_by(Age, `Oral Health Issues (Binary)`) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>% filter(`Oral Health Issues (Binary)` == 1)
perc_model_data = inner_join(model_data, select(d, "Age", "perc"), by = "Age")
# Plot
oral_v_age = ggplot(perc_model_data, aes(x = Age, y = `Oral Health Issues (Binary)`)) +
geom_point(alpha = 0.1, position=position_jitter(width=0.1, height=0.1)) +
geom_smooth(method="glm",
method.args=list(family="binomial")) +
geom_bar(aes(x = Age, y = perc), stat = "summary", fill = "steelblue") +
labs(
title = "Proportion of People with Oral Health Issues by Age",
x = "Age Group",
y = "Oral Health Issues"
) +
theme_classic()
#| label: fig-age
#| layout-ncol: 1
#| echo: false
oral_v_age
with(summary(model), 1 - deviance/null.deviance)
install.packages('pscl')
library(pscl)
pR2(model)['McFadden']
# Calculate R-squared
deviance <- summary(model)$deviance
null_deviance <- summary(model)$null.deviance
rsquared <- 1 - (deviance / null_deviance)
# Print the R-squared value
print(rsquared)
